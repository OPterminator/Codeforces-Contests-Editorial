                                                          A. XXXXX
                                             time limit per test1 second
                                            memory limit per test256 megabytes
                                                  inputstandard input
                                                 outputstandard output
Ehab loves number theory, but for some reason he hates the number x. Given an array a, find the length of its longest subarray such that the sum of its elements isn't divisible by x, or determine that such subarray doesn't exist.
An array a is a subarray of an array b if a can be obtained from b by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.
Input
The first line contains an integer t (1≤t≤5) — the number of test cases you need to solve. The description of the test cases follows.

The first line of each test case contains 2 integers n and x (1≤n≤105, 1≤x≤104) — the number of elements in the array a and the number that Ehab hates.

The second line contains n space-separated integers a1, a2, …, an (0≤ai≤104) — the elements of the array a.

Output
For each testcase, print the length of the longest subarray whose sum isn't divisible by x. If there's no such subarray, print −1.

Example
input
3
3 3
1 2 3
3 4
1 2 3
2 2
0 6
output
2
3
-1
Note
In the first test case, the subarray [2,3] has sum of elements 5, which isn't divisible by 3.

In the second test case, the sum of elements of the whole array is 6, which isn't divisible by 4.

In the third test case, all subarrays have an even sum, so the answer is −1.








Solution:
Let's start with the whole array. If every element in it is divisible by x, the answer is −1; if its sum isn't divisible by x,
the answer is n. Otherwise, we must remove some elements. The key idea is that removing an element that is divisible by x doesn't 
do us any benefits, but once we remove an element that isn't, the sum won't be divisible by x. So let the first non-multiple of x 
be at index l, and the last one be at index r. We must either remove the prefix all the way up to l or the suffix all the way up 
to r, and we'll clearly remove whichever shorter.



Code in C++
#include <bits/stdc++.h>
using namespace std;
int main()
{
	int t;
	scanf("%d",&t);
	while (t--)
	{
		int n,x,sum=0,l=-1,r;
		scanf("%d%d",&n,&x);
		for (int i=0;i<n;i++)
		{
			int a;
			scanf("%d",&a);
			if (a%x)
			{
				if (l==-1)
				l=i;
				r=i;
			}
			sum+=a;
		}
		if (sum%x)
		printf("%d\n",n);
		else if (l==-1)
		printf("-1\n");
		else
		printf("%d\n",n-min(l+1,n-r));
	}
}
